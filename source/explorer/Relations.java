//=========================================================================
//
//  Part of PEG parser generator Mouse.
//
//  Copyright (C) 2020, 2021
//  by Roman R. Redziejowski (www.romanredz.se).
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//-------------------------------------------------------------------------
//
//  Change log
//    Version 2.2
//      Created.
//    Version 2.3
//      Split from 'Properties'.
//      Computation of non-disjoint, DisjointVisitor,
//      and related matrices moved to new class 'Terminals'.
//      'Colon' clases 'Is' and 'IsNot' added to MatrixVisitor.
//      'Colon' expressions included among 'firstTerms' of Exprs.
//
//=========================================================================

package mouse.explorer;

import java.util.BitSet;
import java.util.Vector;
import mouse.peg.Expr;
import mouse.peg.Visitor;
import mouse.utility.BitMatrix;

//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
//
//  Relations
//
//-------------------------------------------------------------------------
//
//  Holds relations used in Explorer.
//
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

public class Relations
{
  //-------------------------------------------------------------------
  //  Relation first.
  //  first[i,j] = true means that string directly generated
  //  by expression i may start with a non-null string generated by j.
  //-------------------------------------------------------------------
  public static BitMatrix first;

  //-------------------------------------------------------------------
  //  Relation First.
  //  First[i,j] = true means that string directly or indirectly
  //  generated by expression i may start with a non-null string
  //  generated by j.
  //  Thus true entries in last T positions of row i
  //  are first terminals of expression i.
  //-------------------------------------------------------------------
  public static BitMatrix First;

  //-------------------------------------------------------------------
  //  Relation refs.
  //  first[i,j] = true means that expression i references expression j.
  //  Used in function 'Find' of GUI_Grammar.
  //-------------------------------------------------------------------
  public static BitMatrix refs;

  //-------------------------------------------------------------------
  //  Shorthands.
  //  Terminals have indexes from N to E-1.
  //  'Colon' expressions have indexes from N1 to N-1.
  //-------------------------------------------------------------------
  private static Expr[] index = Dual.index;
  private static int E = Dual.E;
  private static int N = Dual.N;
  private static int N1 = N-Dual.C;

  //=====================================================================
  //
  //  Compute.
  //
  //=====================================================================
  public static void compute()
    {
      //---------------------------------------------------------------
      //  Compute First, refs, and Terms.
      //---------------------------------------------------------------
      first = BitMatrix.empty(E);
      refs  = BitMatrix.empty(E);

      MatrixVisitor matrixVisitor = new MatrixVisitor();

      for (Expr e: index)
        e.accept(matrixVisitor);

      First = first.star();

      //---------------------------------------------------------------
      //  Set 'first terminals' for all Expressions.
      //  'Colon' expressions are regarded as terminals.
      //---------------------------------------------------------------
      for (Expr e: index)
      {
        for (int i=N1;i<E;i++)
          if (First.at(e.index,i))
             e.firstTerms.set(i);
      }
    }


  //HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
  //
  //  MatrixVisitor.
  //
  //HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

  static class MatrixVisitor extends Visitor
  {
    //-----------------------------------------------------------------
    //  Rule.
    //-----------------------------------------------------------------
    public void visit(Expr.Rule e)
      {
        for (Expr arg: e.args)
        {
          if (arg.adv) first.set(e.index,arg.index);
          refs.set(e.index,arg.index);
        }
      }

    //-----------------------------------------------------------------
    //  Choice.
    //-----------------------------------------------------------------
    public void visit(Expr.Choice e)
      {
        for (Expr arg: e.args)
        {
          if (arg.adv) first.set(e.index,arg.index);
          refs.set(e.index,arg.index);
        }
      }

    //-----------------------------------------------------------------
    //  Sequence.
    //-----------------------------------------------------------------
    public void visit(Expr.Sequence e)
      {
        for (int i=0; i<e.args.length; i++)
        {
          if (e.args[i].adv) first.set(e.index,e.args[i].index);
          if (!e.args[i].nul || e.args[i].end) break;
        }
        for (Expr arg: e.args)
          refs.set(e.index,arg.index);
      }

    //-----------------------------------------------------------------
    //  And.
    //-----------------------------------------------------------------
    public void visit(Expr.And e)
      { refs.set(e.index,e.arg.index); }

    //-----------------------------------------------------------------
    //  Not.
    //-----------------------------------------------------------------
    public void visit(Expr.Not e)
      { refs.set(e.index,e.arg.index); }

    //-----------------------------------------------------------------
    //  Plus.
    //-----------------------------------------------------------------
    public void visit(Expr.Plus e)
      {
        first.set(e.index,e.arg.index); // e.arg.nul checked false
        refs.set(e.index,e.arg.index);
      }

    //-----------------------------------------------------------------
    //  Star.
    //-----------------------------------------------------------------
    public void visit(Expr.Star e)
      {
        first.set(e.index,e.arg.index); // e.arg.nul checked false
        refs.set(e.index,e.arg.index);
      }

    //-----------------------------------------------------------------
    //  Query.
    //-----------------------------------------------------------------
    public void visit(Expr.Query e)
      {
        if (e.arg.adv) first.set(e.index,e.arg.index);
        refs.set(e.index,e.arg.index);
      }

    //-----------------------------------------------------------------
    //  PlusPlus.
    //-----------------------------------------------------------------
    public void visit(Expr.PlusPlus e)
      {
        first.set(e.index,e.arg1.index);  // e.arg1.nul checked 'false'
        refs.set(e.index,e.arg1.index);
        refs.set(e.index,e.arg2.index);
     }

    //-----------------------------------------------------------------
    //  StarPlus.
    //-----------------------------------------------------------------
    public void visit(Expr.StarPlus e)
      {
        first.set(e.index,e.arg1.index); // e.arg1.nul checked 'false'
        if (e.arg2.adv) first.set(e.index,e.arg2.index);
        refs.set(e.index,e.arg1.index);
        refs.set(e.index,e.arg2.index);
      }

    //-----------------------------------------------------------------
    //  Is.
    //-----------------------------------------------------------------
    public void visit(Expr.Is e)
      {
        refs.set(e.index,e.arg1.index);
        refs.set(e.index,e.arg2.index);
     }

    //-----------------------------------------------------------------
    //  IsNot.
    //-----------------------------------------------------------------
    public void visit(Expr.IsNot e)
      {
        refs.set(e.index,e.arg1.index);
        refs.set(e.index,e.arg2.index);
     }
  }
}